//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.JobManagerReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobManagerReference.IJobManagerService", CallbackContract=typeof(Client.JobManagerReference.IJobManagerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IJobManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/RunJob", ReplyAction="http://tempuri.org/IJobManagerService/RunJobResponse")]
        JobManager.Transfer.Data.DTO.WorkerDto RunJob(JobManager.Transfer.Data.DTO.JobDto jobDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/RunJob", ReplyAction="http://tempuri.org/IJobManagerService/RunJobResponse")]
        System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.WorkerDto> RunJobAsync(JobManager.Transfer.Data.DTO.JobDto jobDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/Signal", ReplyAction="http://tempuri.org/IJobManagerService/SignalResponse")]
        JobManager.Transfer.Data.DTO.TransferData Signal(System.Guid workerId, JobManager.Transfer.Data.DTO.TransferData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/Signal", ReplyAction="http://tempuri.org/IJobManagerService/SignalResponse")]
        System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.TransferData> SignalAsync(System.Guid workerId, JobManager.Transfer.Data.DTO.TransferData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/GetJob", ReplyAction="http://tempuri.org/IJobManagerService/GetJobResponse")]
        JobManager.Transfer.Data.DTO.JobDto GetJob(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/GetJob", ReplyAction="http://tempuri.org/IJobManagerService/GetJobResponse")]
        System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.JobDto> GetJobAsync(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/GetWorkers", ReplyAction="http://tempuri.org/IJobManagerService/GetWorkersResponse")]
        JobManager.Transfer.Data.DTO.WorkerDto[] GetWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/GetWorkers", ReplyAction="http://tempuri.org/IJobManagerService/GetWorkersResponse")]
        System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.WorkerDto[]> GetWorkersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/ScheduleJob", ReplyAction="http://tempuri.org/IJobManagerService/ScheduleJobResponse")]
        System.Guid ScheduleJob(JobManager.Transfer.Data.DTO.JobDto jobDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/ScheduleJob", ReplyAction="http://tempuri.org/IJobManagerService/ScheduleJobResponse")]
        System.Threading.Tasks.Task<System.Guid> ScheduleJobAsync(JobManager.Transfer.Data.DTO.JobDto jobDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/RescheduleJob", ReplyAction="http://tempuri.org/IJobManagerService/RescheduleJobResponse")]
        void RescheduleJob(JobManager.Transfer.Data.DTO.JobDto jobDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/RescheduleJob", ReplyAction="http://tempuri.org/IJobManagerService/RescheduleJobResponse")]
        System.Threading.Tasks.Task RescheduleJobAsync(JobManager.Transfer.Data.DTO.JobDto jobDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/UnscheduleJob", ReplyAction="http://tempuri.org/IJobManagerService/UnscheduleJobResponse")]
        void UnscheduleJob(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/UnscheduleJob", ReplyAction="http://tempuri.org/IJobManagerService/UnscheduleJobResponse")]
        System.Threading.Tasks.Task UnscheduleJobAsync(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/DeleteJob", ReplyAction="http://tempuri.org/IJobManagerService/DeleteJobResponse")]
        void DeleteJob(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/DeleteJob", ReplyAction="http://tempuri.org/IJobManagerService/DeleteJobResponse")]
        System.Threading.Tasks.Task DeleteJobAsync(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/SubscribeClientContext", ReplyAction="http://tempuri.org/IJobManagerService/SubscribeClientContextResponse")]
        void SubscribeClientContext();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/SubscribeClientContext", ReplyAction="http://tempuri.org/IJobManagerService/SubscribeClientContextResponse")]
        System.Threading.Tasks.Task SubscribeClientContextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/UnsubscribeClientContext", ReplyAction="http://tempuri.org/IJobManagerService/UnsubscribeClientContextResponse")]
        void UnsubscribeClientContext();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/UnsubscribeClientContext", ReplyAction="http://tempuri.org/IJobManagerService/UnsubscribeClientContextResponse")]
        System.Threading.Tasks.Task UnsubscribeClientContextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/SetClientContextToWorker", ReplyAction="http://tempuri.org/IJobManagerService/SetClientContextToWorkerResponse")]
        void SetClientContextToWorker(System.Guid workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/SetClientContextToWorker", ReplyAction="http://tempuri.org/IJobManagerService/SetClientContextToWorkerResponse")]
        System.Threading.Tasks.Task SetClientContextToWorkerAsync(System.Guid workerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJobManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJobManagerService/OnEvent")]
        void OnEvent(JobManager.Transfer.Data.DTO.JobEventDto eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/OnEventSync", ReplyAction="http://tempuri.org/IJobManagerService/OnEventSyncResponse")]
        JobManager.Transfer.Data.DTO.TransferData OnEventSync(JobManager.Transfer.Data.DTO.JobEventDto eventDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJobManagerService/WorkerWillBeStarted")]
        void WorkerWillBeStarted(JobManager.Transfer.Data.DTO.WorkerDto worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManagerService/ClientIdentifier", ReplyAction="http://tempuri.org/IJobManagerService/ClientIdentifierResponse")]
        System.Guid ClientIdentifier();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJobManagerServiceChannel : Client.JobManagerReference.IJobManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JobManagerServiceClient : System.ServiceModel.DuplexClientBase<Client.JobManagerReference.IJobManagerService>, Client.JobManagerReference.IJobManagerService {
        
        public JobManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public JobManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public JobManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JobManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JobManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public JobManager.Transfer.Data.DTO.WorkerDto RunJob(JobManager.Transfer.Data.DTO.JobDto jobDto) {
            return base.Channel.RunJob(jobDto);
        }
        
        public System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.WorkerDto> RunJobAsync(JobManager.Transfer.Data.DTO.JobDto jobDto) {
            return base.Channel.RunJobAsync(jobDto);
        }
        
        public JobManager.Transfer.Data.DTO.TransferData Signal(System.Guid workerId, JobManager.Transfer.Data.DTO.TransferData data) {
            return base.Channel.Signal(workerId, data);
        }
        
        public System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.TransferData> SignalAsync(System.Guid workerId, JobManager.Transfer.Data.DTO.TransferData data) {
            return base.Channel.SignalAsync(workerId, data);
        }
        
        public JobManager.Transfer.Data.DTO.JobDto GetJob(System.Guid jobId) {
            return base.Channel.GetJob(jobId);
        }
        
        public System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.JobDto> GetJobAsync(System.Guid jobId) {
            return base.Channel.GetJobAsync(jobId);
        }
        
        public JobManager.Transfer.Data.DTO.WorkerDto[] GetWorkers() {
            return base.Channel.GetWorkers();
        }
        
        public System.Threading.Tasks.Task<JobManager.Transfer.Data.DTO.WorkerDto[]> GetWorkersAsync() {
            return base.Channel.GetWorkersAsync();
        }
        
        public System.Guid ScheduleJob(JobManager.Transfer.Data.DTO.JobDto jobDto) {
            return base.Channel.ScheduleJob(jobDto);
        }
        
        public System.Threading.Tasks.Task<System.Guid> ScheduleJobAsync(JobManager.Transfer.Data.DTO.JobDto jobDto) {
            return base.Channel.ScheduleJobAsync(jobDto);
        }
        
        public void RescheduleJob(JobManager.Transfer.Data.DTO.JobDto jobDto) {
            base.Channel.RescheduleJob(jobDto);
        }
        
        public System.Threading.Tasks.Task RescheduleJobAsync(JobManager.Transfer.Data.DTO.JobDto jobDto) {
            return base.Channel.RescheduleJobAsync(jobDto);
        }
        
        public void UnscheduleJob(System.Guid jobId) {
            base.Channel.UnscheduleJob(jobId);
        }
        
        public System.Threading.Tasks.Task UnscheduleJobAsync(System.Guid jobId) {
            return base.Channel.UnscheduleJobAsync(jobId);
        }
        
        public void DeleteJob(System.Guid jobId) {
            base.Channel.DeleteJob(jobId);
        }
        
        public System.Threading.Tasks.Task DeleteJobAsync(System.Guid jobId) {
            return base.Channel.DeleteJobAsync(jobId);
        }
        
        public void SubscribeClientContext() {
            base.Channel.SubscribeClientContext();
        }
        
        public System.Threading.Tasks.Task SubscribeClientContextAsync() {
            return base.Channel.SubscribeClientContextAsync();
        }
        
        public void UnsubscribeClientContext() {
            base.Channel.UnsubscribeClientContext();
        }
        
        public System.Threading.Tasks.Task UnsubscribeClientContextAsync() {
            return base.Channel.UnsubscribeClientContextAsync();
        }
        
        public void SetClientContextToWorker(System.Guid workerId) {
            base.Channel.SetClientContextToWorker(workerId);
        }
        
        public System.Threading.Tasks.Task SetClientContextToWorkerAsync(System.Guid workerId) {
            return base.Channel.SetClientContextToWorkerAsync(workerId);
        }
    }
}
